import telebot
import sqlite3
import secrets
import string
from cryptography.fernet import Fernet

TOKEN = "7274151929:AAHkjqiAnVMEL3WMI-FSzGS1nMv4maztn1k"  # –¢–æ–∫–µ–Ω –≤—ñ–¥ BotFather
bot = telebot.TeleBot(TOKEN)

# –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è 
ENCRYPTION_KEY = Fernet.generate_key()
cipher = Fernet(ENCRYPTION_KEY)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect("passwords.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS passwords (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        service TEXT,
        password TEXT
    )
    """)
    conn.commit()
    conn.close()

init_db()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞—Ä–æ–ª—è–º–∏ üõ°Ô∏è\n"
        "–û—Å—å —â–æ —è –≤–º—ñ—é:\n"
        "/add - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≤–∞—à—ñ –ø–∞—Ä–æ–ª—ñ\n"
        "/generate - –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å\n"
    )

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è 
@bot.message_handler(commands=['add'])
def add_password(message):
    bot.reply_to(message, "–ù–∞–ø–∏—à—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: *–°–µ—Ä–≤—ñ—Å –ü–∞—Ä–æ–ª—å*", parse_mode="Markdown")
    
    @bot.message_handler(func=lambda msg: True)
    def save_password(msg):
        try:
            user_id = msg.from_user.id
            service, password = msg.text.split(" ", 1)
            encrypted_password = cipher.encrypt(password.encode()).decode()

            conn = sqlite3.connect("passwords.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO passwords (user_id, service, password) VALUES (?, ?, ?)", 
                           (user_id, service, encrypted_password))
            conn.commit()
            conn.close()

            bot.reply_to(msg, f"–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É '{service}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! ‚úÖ")
        except Exception:
            bot.reply_to(msg, "–ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–≤–µ–ª–∏ –¥–∞–Ω—ñ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")

# –ü–µ—Ä–µ–≥–ª—è–¥ –ø–∞—Ä–æ–ª—ñ–≤
@bot.message_handler(commands=['list'])
def list_passwords(message):
    user_id = message.from_user.id

    conn = sqlite3.connect("passwords.db")
    cursor = conn.cursor()
    cursor.execute("SELECT service, password FROM passwords WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    conn.close()

    if rows:
        response = "–í–∞—à—ñ –ø–∞—Ä–æ–ª—ñ:\n"
        for service, encrypted_password in rows:
            password = cipher.decrypt(encrypted_password.encode()).decode()
            response += f"üîê {service}: {password}\n"
    else:
        response = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤."

    bot.reply_to(message, response)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
@bot.message_handler(commands=['generate'])
def generate_password(message):
    password_length = 12
    characters = string.ascii_letters + string.digits + string.punctuation
    generated_password = ''.join(secrets.choice(characters) for _ in range(password_length))
    bot.reply_to(message, f"–í–∞—à –Ω–æ–≤–∏–π –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å: `{generated_password}`", parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()